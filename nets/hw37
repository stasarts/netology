Win 10 Home, работа в Windows Terminal.
ВМ ubuntu 20.04 разворачивается (Vagrant+VirtualBox):
vagrant init bento/ubuntu-20.04
vagrant up
vagrant ssh

1) Проверьте список доступных сетевых интерфейсов на вашем компьютере.
$ ip -c -br link
lo               UNKNOWN        00:00:00:00:00:00 <LOOPBACK,UP,LOWER_UP>
eth0             UP             08:00:27:73:60:cf <BROADCAST,MULTICAST,UP,LOWER_UP>

Ответ: команда ip c различными опциями. Список доступных интерфейсов на ВМ: lo, eth0.

2) Для распознавания соседа по сетевому интерфейсу используется протокол LLDP.
Пакет в Linux: lldpd. Команда: lldpctl.
$ lldpctl
-------------------------------------------------------------------------------
LLDP neighbors:
-------------------------------------------------------------------------------
В данный момент у ВМ нет соседей.

3) Для разделения L2 коммутатора на несколько виртуальных сетей используется технология VLAN (Virtual Local Area Network) — виртуальная локальная компьютерная сеть.
Пакет в Linux: vlan. Команды:
$ vconfig add eth0 <vlan-id> # для добавления vlan
$ ifconfig eth0.<vlan-id> 192.168.1.100 netmask 255.255.255.0 broadcast 192.168.1.255 up # назначить интерфесу vlan ip адрес 192.168.1.100
Чтобы перманентно добавить vlan, нужно записать его в /etc/network/interfaces (пример конфига):
## vlan for eth0 with ID – <vlan-id> on a Debian/Ubuntu Linux##
auto eth0.<vlan-id>
iface eth0.<vlan-id> inet static
address 192.168.1.100
netmask 255.255.255.0
vlan-raw-device eth0

4) Возможность объединения сетевых интерфейсов для отказоустойчивости и увеличения пропускной способности - Bonding (в Linux), Teaming (в Windows).
Типы агрегации интерфейсов в Linux:
-	Mode-0(balance-rr) – Данный режим используется по умолчанию.
	Balance-rr обеспечивается балансировку нагрузки и отказоустойчивость.
	В данном режиме сетевые пакеты отправляются “по кругу”, от первого интерфейса к последнему.
	Если выходят из строя интерфейсы, пакеты отправляются на остальные оставшиеся.
	Дополнительной настройки коммутатора не требуется при нахождении портов в одном коммутаторе.
	При разностных коммутаторах требуется дополнительная настройка.

-	Mode-1(active-backup) – Один из интерфейсов работает в активном режиме, остальные в ожидающем.
	При обнаружении проблемы на активном интерфейсе производится переключение на ожидающий интерфейс.
	Не требуется поддержки от коммутатора.

-	Mode-2(balance-xor) – Передача пакетов распределяется по типу входящего и исходящего трафика по формуле ((MAC src) XOR (MAC dest)) % число интерфейсов.
	Режим дает балансировку нагрузки и отказоустойчивость.
	Не требуется дополнительной настройки коммутатора/коммутаторов.

-	Mode-3(broadcast) – Происходит передача во все объединенные интерфейсы, тем самым обеспечивая отказоустойчивость.
	Рекомендуется только для использования MULTICAST трафика.

-	Mode-4(802.3ad) – динамическое объединение одинаковых портов.
	В данном режиме можно значительно увеличить пропускную способность входящего так и исходящего трафика.
	Для данного режима необходима поддержка и настройка коммутатора/коммутаторов.

-	Mode-5(balance-tlb) – Адаптивная балансировки нагрузки трафика.
	Входящий трафик получается только активным интерфейсом, исходящий распределяется в зависимости от текущей загрузки канала каждого интерфейса.
	Не требуется специальной поддержки и настройки коммутатора/коммутаторов.

-	Mode-6(balance-alb) – Адаптивная балансировка нагрузки.
	Отличается более совершенным алгоритмом балансировки нагрузки чем Mode-5).
	Обеспечивается балансировку нагрузки как исходящего так и входящего трафика.
	Не требуется специальной поддержки и настройки коммутатора/коммутаторов.

Пример конфига balance-rr (отказоустойчивость и балансировка) интерфейсов eth0 и eth1 (/etc/network/interfaces):
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto bond0

iface bond0 inet static
address 192.168.0.1
netmask 255.255.255.0
network 192.168.0.0

slaves eth0 eth1
bond-mode balance-rr
bond-miimon 100
bond-downdelay 200
bond-updelay 200

5) Воспользуемся утилитой sipcalc.
$ sipcalc 10.10.10.0/29
-[ipv4 : 10.10.10.0/29] - 0

[CIDR]
Host address            - 10.10.10.0
Host address (decimal)  - 168430080
Host address (hex)      - A0A0A00
Network address         - 10.10.10.0
Network mask            - 255.255.255.248
Network mask (bits)     - 29
Network mask (hex)      - FFFFFFF8
Broadcast address       - 10.10.10.7
Cisco wildcard          - 0.0.0.7
Addresses in network    - 8
Network range           - 10.10.10.0 - 10.10.10.7
Usable range            - 10.10.10.1 - 10.10.10.6 

Ответ: в сети с маской /29 6 хостов.

$ sipcalc -s 29 10.10.10.0/24 | grep Network | wc -l
32

Ответ: 32 подсети можно получить из сети с маской /24

Примеры примеров .29 подсетей внутри сети 10.10.10.0/24:
$ sipcalc -s 29 10.10.10.0/24
-[ipv4 : 10.10.10.0/24] - 0

[Split network]
Network                 - 10.10.10.0      - 10.10.10.7
Network                 - 10.10.10.8      - 10.10.10.15
Network                 - 10.10.10.16     - 10.10.10.23
...
Network                 - 10.10.10.248    - 10.10.10.255

6) Частные IP адреса допустимо взять из диапазона: 100.64.0.0 — 100.127.255.255 (маска подсети: 255.192.0.0 или /10) Carrier-Grade NAT.
Маска расчета максимум 40-50: /26 (62 хоста).

7) Проверить ARP таблицу:
- в Linux: ip neigh, arp -n
- Windows: arp -a
Очистить ARP кеш полностью:
- в Linux: ip neigh flush
- Windows: arp -d *
Из ARP таблицы удалить только один нужный IP:
- в Linux: ip neigh delete <ip> dev <interface>, arp -d <ip>
- Windows: arp -d <id>